
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  comments      Comment[]
  Posts         Post[]
  Likes         Like[]
  Community     Community?
  Location Location?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  content   String
  userId    String
  postId String
  post Post @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
 
}

model Post {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  Comments Comment[]
  Likes Like[]

  Community Community @relation(fields: [communityId], references: [id])
  communityId String 

  

}

model Community {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name String @unique
  moderator User @relation(fields: [userId], references: [id])
  Posts Post[]
  userId String @unique


}

model Location{
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name String @unique
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}


model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  postId String
  userId String
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  @@unique([postId, userId])
}

